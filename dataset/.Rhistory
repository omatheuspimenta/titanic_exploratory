table(titanic3$mom, titanic3$pclass)
table(titanic3$mom, titanic3$pclass, titanic3$survived)
#####
# Set path
setwd("/home/matheus/Dropbox/06_doutorado/2021_01/Bioestatistica/projeto/dataset/")
#####
# Now, we will see column by column to find "gold information"
# The columns "pclass" and "survived" does not have any "new" information until here.
# The column "name"
# Extract the "Mr", "Mrs",... of the observation and copy to a new column "title"
titanic3$title <- str_split_fixed(titanic3$name, " ",3)[,2]
# Extract the last name for other analysis
titanic3$lastname <- str_split_fixed(titanic3$name, " ",3)[,1]
# Input the new values on NA using bootstrap
f <- function(x,i){
xx<-x[i]
return(mean(xx, na.rm=TRUE))
}
R <- 1000 # use 10000 if need
pclass <- c("1st", "2nd", "3rd")
i_1 <- which(is.na(titanic3[titanic3$pclass=="1st",]$age))
i_2 <- 323 + which(is.na(titanic3[titanic3$pclass=="2nd",]$age))
i_3 <- 600 + which(is.na(titanic3[titanic3$pclass=="3rd",]$age))
#####
# Load file
load("titanic3.sav")
#####
# Now, we will see column by column to find "gold information"
# The columns "pclass" and "survived" does not have any "new" information until here.
# The column "name"
# Extract the "Mr", "Mrs",... of the observation and copy to a new column "title"
titanic3$title <- str_split_fixed(titanic3$name, " ",3)[,2]
# Extract the last name for other analysis
titanic3$lastname <- str_split_fixed(titanic3$name, " ",3)[,1]
# Input the new values on NA using bootstrap
f <- function(x,i){
xx<-x[i]
return(mean(xx, na.rm=TRUE))
}
R <- 1000 # use 10000 if need
pclass <- c("1st", "2nd", "3rd")
i_1 <- which(is.na(titanic3[titanic3$pclass=="1st",]$age))
i_2 <- 323 + which(is.na(titanic3[titanic3$pclass=="2nd",]$age))
i_3 <- 600 + which(is.na(titanic3[titanic3$pclass=="3rd",]$age))
for (c in pclass){
if(c=="1st"){
for(i in i_1){ # because the dataset is ordered
input <- titanic3[titanic3$pclass==c,]$age
if(is.na(titanic3$age[i])){
b <- boot(input, f, R=R)
if(mean(b$t) < 1){
output <- mean(b$t)
}else{
output <- round(mean(b$t))
}
titanic3$age[i] <- output
}
}
}
if(c=="2nd"){
for(i in i_2){ # because the dataset is ordered
input <- titanic3[titanic3$pclass==c,]$age
if(is.na(titanic3$age[i])){
b <- boot(input, f, R=R)
if(mean(b$t) < 1){
output <- mean(b$t)
}else{
output <- round(mean(b$t))
}
titanic3$age[i] <- output
}
}
}
if(c=="3rd"){
for(i in i_3){ # because the dataset is ordered
input <- titanic3[titanic3$pclass==c,]$age
if(is.na(titanic3$age[i])){
b <- boot(input, f, R=R)
if(mean(b$t) < 1){
output <- mean(b$t)
}else{
output <- round(mean(b$t))
}
titanic3$age[i] <- output
}
}
}
}
# remove temp variables
remove(c,i,input,output,pclass,R,f,b,i_1,i_2,i_3)
# Replace the value using bootstrap, how the NA values is in "3rd" class, we
# assume the mean by class.
f <- function(x,i){
xx<-x[i]
return(mean(xx, na.rm=TRUE))
}
R <- 1000 # use 10000 if need
input <- titanic3[titanic3$pclass=="3rd",]$fare
b <- boot(input, f, R=R)
i <- which(is.na(titanic3$fare))
titanic3$fare[i] <- mean(b$t)
#remove temp variables
remove(f,R,input,b,i)
# The column "cabin" we can't impute the NA information yet. One way to do this is
# associate last name with cabin, but those information isn't avaiable.
# The column "embarked" have 2 NA values. Let's see.
i_n<-which(is.na(titanic3$embarked))
titanic3[which(is.na(titanic3$embarked)),]
# The 2 values belong to "1st" class.
t<-table(titanic3$embarked,titanic3$pclass)
c<-prop.table(t)
x<-c("Cherbourg", "Queenstown", "Southampton")
# Input new values in NA
for (i in i_n){
titanic3$embarked[i]<-sample(x,1,prob = c)
}
remove(i_n,t,c,x,i)
# The 2 values belong to "1st" class.
t<-table(titanic3$embarked,titanic3$pclass)
c<-prop.table(t)
x<-c("Cherbourg", "Queenstown", "Southampton")
# Input new values in NA
for (i in i_n){
titanic3$embarked[i]<-sample(x,1,prob = c)
}
# The column "cabin" we can't impute the NA information yet. One way to do this is
# associate last name with cabin, but those information isn't avaiable.
# The column "embarked" have 2 NA values. Let's see.
i_n<-which(is.na(titanic3$embarked))
titanic3[which(is.na(titanic3$embarked)),]
# The 2 values belong to "1st" class.
t<-table(titanic3$embarked,titanic3$pclass)
c<-prop.table(t)
x<-c("Cherbourg", "Queenstown", "Southampton")
# Input new values in NA
for (i in i_n){
titanic3$embarked[i]<-sample(x,1,prob = c)
}
c
titanic3[which(is.na(titanic3$embarked)),]
# The 2 values belong to "1st" class.
t<-table(titanic3$embarked,titanic3[titanic3$pclass=="1st",])
# The 2 values belong to "1st" class.
t<-table(titanic3$embarked,titanic3$pclass=="1st")
t
# The 2 values belong to "1st" class.
t<-table(titanic3$embarked,titanic3$pclass)
t
t[,1]
c<-prop.table(t[,1])
x<-c("Cherbourg", "Queenstown", "Southampton")
# Input new values in NA
for (i in i_n){
titanic3$embarked[i]<-sample(x,1,prob = c)
}
remove(i_n,t,c,x,i)
# In the columns "boat", "body" and, "home.dest" we don't explore yet.
# Two new column will be create: "mom" and "nfamily".
# nfamily represents the number of relatives
# number of siblings + number of parents + 1 (the observation)
titanic3$nfamily <- titanic3$sibsp + titanic3$parch + 1
# mom represents if the women is mom or not, to create only if the age > 18 and
# parch > 1
titanic3$mom <- ifelse((titanic3$sex=="female" & titanic3$parch>=1 & titanic3$age > 18), 1, 0)
View(titanic3)
save("titanic3_mp.sav")
save.image("titanic3_mp.RData")
#####
# Set path
setwd("/home/matheus/Dropbox/06_doutorado/2021_01/Bioestatistica/projeto/dataset/")
#####
# Load file
load("titanic3.sav")
#####
# Sumary
head(titanic3)
dim(titanic3)
#####
# Identifying the types of the variables
print("Classes (class):")
print(sapply(titanic3, class))
print("Classes (typeof):")
print(sapply(titanic3, typeof))
#####
# Describe dataset
describe(titanic3)
# 745      564      368
#
# lowest : ?Havana, Cuba                   Aberdeen / Portland, OR         Albany, NY                      Altdorf, Switzerland            Amenia, ND
# highest: Worcester, England              Worcester, MA                   Yoevil, England / Cottage Grove Youngstown, OH                  Zurich, Switzerland
# --------------------------------------------------------------------------------------------------------
#####
# Now, we will see column by column to find "gold information"
# The columns "pclass" and "survived" do not have any "new" information until here.
# In the column "name" we can extract the "Mr", "Mrs",... of the observation
# and copy to a new column "title"
titanic3$title <- str_split_fixed(titanic3$name, " ",3)[,2]
# Extracting the last name for other analysis
titanic3$lastname <- str_split_fixed(titanic3$name, " ",3)[,1]
t<-count(titanic3, 'title')
t<-t[order(t$freq, decreasing = TRUE),]
ylim <- c(0, 1.1*max(t$freq))
xx <- barplot(t$freq[1:20],
col = rainbow(20),
main = "Barplot - Title",
xlab = "Title",
ylab = "Frequency",
ylim = ylim)
text(x = xx, y = t$freq[1:20], label = t$freq[1:20], pos = 3, cex = 0.8, col = "black")
axis(1, at=xx, labels=t$title[1:20], tick=FALSE, las=2, line=-0.5, cex.axis=0.8)
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
t<-t[order(t$freq, decreasing = TRUE),]
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
t<-t[order(t$freq, decreasing = TRUE),]
t
View(t)
View(titanic3)
View(t)
View(titanic3)
table(titanic3$title)
t<-table(titanic3$title)
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
t<-table(titanic3$title)
t$freq
library("dplyr") #for summary
library("plyr")
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
t<-t[order(t$freq, decreasing = TRUE),]
ylim <- c(0, 1.1*max(t$freq))
xx <- barplot(t$freq[1:20],
col = rainbow(20),
main = "Barplot - Title",
xlab = "Title",
ylab = "Frequency",
ylim = ylim)
text(x = xx, y = t$freq[1:20], label = t$freq[1:20], pos = 3, cex = 0.8, col = "black")
axis(1, at=xx, labels=t$title[1:20], tick=FALSE, las=2, line=-0.5, cex.axis=0.8)
# remove temp variables
remove(t,xx,ylim)
# temp variable for barplot - lastname
t<-count(titanic3, 'lastname')
t<-t[order(t$freq, decreasing = TRUE),]
ylim <- c(0, 1.1*max(t$freq))
xx <- barplot(t$freq[1:20],
col = rainbow(20),
main = "Barplot - Last name",
xlab = "Last name",
ylab = "Frequency",
ylim = ylim)
text(x = xx, y = t$freq[1:20], label = t$freq[1:20], pos = 3, cex = 0.8, col = "black")
axis(1, at=xx, labels=t$lastname[1:20], tick=FALSE, las=2, line=-0.5, cex.axis=0.8)
# remove temp variables
remove(t,xx,ylim)
# 0.1667 80.0000
# boxplot
boxplot(titanic3$age~titanic3$pclass,
main= "Age boxplot",
xlab= "Age in years",
horizontal = TRUE,
col = "green")
# histogram and qqnorm
age <- titanic3$age
mean_age <- mean(age,
na.rm = TRUE)
sd_age <- sd(age,
na.rm = TRUE)
fteoricoN_age <- dnorm(seq(min(age, na.rm = TRUE),max(age, na.rm = TRUE),by=1),
mean=mean_age,
sd=sd_age)
hist(age,
freq=F,
xlab="Age",
ylab="Relative Frequency",
main="Histogram - Age",
col = "green")
lines(seq(min(age, na.rm = TRUE),max(age, na.rm = TRUE),by=1)
,fteoricoN_age,
col="red")
legend(x=60,y=0.04,legend=c("Normal"),lty=1,col=c("red"),bty="n")
qqnorm(age,
xlab="Theoretical Quantiles ",
ylab="Quantile Sample ",
main="Age")
qqline(as.numeric(age),
col="red")
# Input the new values in NA using the bootstrap strategy
f <- function(x,i){
xx<-x[i]
return(mean(xx, na.rm=TRUE))
}
# remove temp variables
remove(age,fteoricoN_age,mean_age,sd_age)
R <- 1000 # use 10000 if need
pclass <- c("1st", "2nd", "3rd")
i_1 <- which(is.na(titanic3[titanic3$pclass=="1st",]$age))
i_2 <- 323 + which(is.na(titanic3[titanic3$pclass=="2nd",]$age))
i_3 <- 600 + which(is.na(titanic3[titanic3$pclass=="3rd",]$age))
for (c in pclass){
if(c=="1st"){
for(i in i_1){ # because the dataset is ordered
input <- titanic3[titanic3$pclass==c,]$age
if(is.na(titanic3$age[i])){
b <- boot(input, f, R=R)
if(mean(b$t) < 1){
output <- mean(b$t)
}else{
output <- round(mean(b$t))
}
titanic3$age[i] <- output
}
}
}
if(c=="2nd"){
for(i in i_2){ # because the dataset is ordered
input <- titanic3[titanic3$pclass==c,]$age
if(is.na(titanic3$age[i])){
b <- boot(input, f, R=R)
if(mean(b$t) < 1){
output <- mean(b$t)
}else{
output <- round(mean(b$t))
}
titanic3$age[i] <- output
}
}
}
if(c=="3rd"){
for(i in i_3){ # because the dataset is ordered
input <- titanic3[titanic3$pclass==c,]$age
if(is.na(titanic3$age[i])){
b <- boot(input, f, R=R)
if(mean(b$t) < 1){
output <- mean(b$t)
}else{
output <- round(mean(b$t))
}
titanic3$age[i] <- output
}
}
}
}
# remove temp variables
remove(c,i,input,output,pclass,R,f,b,i_1,i_2,i_3)
# replot the graphs
# boxplot
boxplot(titanic3$age~titanic3$pclass,
main= "Age boxplot",
xlab= "Age in years",
ylab= "Class",
horizontal = TRUE,
col = "green")
# histogram and qqnorm
age <- titanic3$age
mean_age <- mean(age,
na.rm = TRUE)
sd_age <- sd(age,
na.rm = TRUE)
fteoricoN_age <- dnorm(seq(min(age, na.rm = TRUE),max(age, na.rm = TRUE),by=1),
mean=mean_age,
sd=sd_age)
hist(age,
freq=F,
xlab="Age",
ylab="Relative Frequency",
main="Histogram - Age",
col = "green")
lines(seq(min(age, na.rm = TRUE),max(age, na.rm = TRUE),by=1)
,fteoricoN_age,
col="red")
legend(x=60,y=0.04,legend=c("Normal"),lty=1,col=c("red"),bty="n")
qqnorm(age,
xlab="Theoretical Quantiles ",
ylab="Quantile Sample ",
main="Age")
qqline(as.numeric(age),
col="red")
# remove temp variables
remove(age, fteoricoN_age, mean_age, sd_age)
# The columns "sibsp", "parch" and "ticket" do not have any "new"
# information until here.
# The column "fare" has one NA value, let's see this.
# Finding 'NA' in fare
titanic3[which(is.na(titanic3$fare)),]
# Replacing the value using the bootstrap strategy. How the NA values
# are in the "3rd" class, we assume the mean by class.
f <- function(x,i){
xx<-x[i]
return(mean(xx, na.rm=TRUE))
}
R <- 1000 # use 10000 if need
input <- titanic3[titanic3$pclass=="3rd",]$fare
b <- boot(input, f, R=R)
i <- which(is.na(titanic3$fare))
titanic3$fare[i] <- mean(b$t)
#remove temp variables
remove(f,R,input,b,i)
# boxplot, histgram and qqplot
boxplot(titanic3$fare~titanic3$pclass,
main= "Fare boxplot",
xlab= "Money",
ylab= "Class",
horizontal = TRUE,
col = "pink")
fare <- titanic3$fare
mean_fare <- mean(fare)
sd_fare <- sd(fare)
fteoricoN_fare <- dnorm(seq(min(fare),max(fare),by=1),
mean=mean_fare,
sd=sd_fare)
fteoricoE_fare <- dexp(seq(min(fare),max(fare),by=10),
rate=1/mean_fare)
hist(fare,
freq=F,
xlab="Age",
ylab="Relative Frequency",
main="Histogram - Fare",
col = "pink")
lines(seq(min(fare),max(fare),by=1),
fteoricoN_fare,
col="red")
lines(seq(min(fare),max(fare),by=10),
fteoricoE_fare,
col="blue")
legend(x=400,
y=0.015,
legend=c("Normal","Exponential"),
lty=1,
col=c("red","blue"),
bty="n")
qqnorm(fare,
xlab="Theoretical Quantiles ",
ylab="Quantile Sample ",
main="Fare")
qqline(as.numeric(fare),
col="red")
# Mean fare/class
tapply(q$fare,q$pclass, mean)
# Mean fare/class
tapply(titanic$fare,titanic$pclass, mean)
# Mean fare/class
tapply(titanic3$fare,titanic3$pclass, mean)
# In the column "cabin" we can't impute the NA information yet.
# One way to do this is to associate the last name with the cabin,
# but that information isn't available.
# The column "embarked" has 2 NA values. Let's see.
i_n<-which(is.na(titanic3$embarked))
titanic3[which(is.na(titanic3$embarked)),]
# The 2 values belong to the "1st" class.
t<-table(titanic3$embarked,titanic3$pclass)
c<-prop.table(t[,1])
x<-c("Cherbourg", "Queenstown", "Southampton")
# Input new values in NA
for (i in i_n){
titanic3$embarked[i]<-sample(x,1,prob = c)
}
remove(i_n,t,c,x,i)
# remove temp variables
remove(fare, fteoricoN_fare, fteoricoE_fare, mean_fare, sd_fare)
# In the columns "boat", "body" and, "home.dest" we will not explore yet.
# Two new columns will be creating: "mom" and "nfamily".
# nfamily represents the number of relatives
# number of siblings + number of parents + 1 (the observation)
titanic3$nfamily <- titanic3$sibsp + titanic3$parch + 1
# mom represents if the woman is mom or not, to create only if the age > 18 and
# parch > 1
titanic3$mom <- ifelse((titanic3$sex=="female" & titanic3$parch>=1 & titanic3$age > 18), 1, 0)
#####
describe(titanic3)
View(titanic3)
# Value          1     2     3     4     5     6     7     8    11
# Frequency    790   235   159    43    22    25    16     8    11
# Proportion 0.604 0.180 0.121 0.033 0.017 0.019 0.012 0.006 0.008
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# mom
#    n  missing distinct     Info      Sum     Mean      Gmd
# 1309        0        2    0.239      114  0.08709   0.1591
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                                                                             -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# save the file
save.image("titanic3.RData")
plsmo(age, survived, group=sex, datadensity=T) # or group=pclass
attach(titanic3)
plsmo(titanic3$age, titanic3$survived, group=sex, datadensity=T) # or group=pclass
plsmo(titanic3$age, titanic3$survived, group=titanic3$sex, datadensity=T) # or group=pclass
plot(naclus(titanic3)) # study patterns of missing values
summary(survived ~ age + sex + pclass + sibsp + parch, data=titanic3)
plsmo(titanic3$age, titanic3$survived, datadensity=T) # or group=pclass
plsmo(titanic3$pclass, titanic3$survived, datadensity=T) # or group=pclass
plsmo(titanic3$age, titanic3$survived, datadensity=T) # or group=pclass
plsmo(titanic3$age, titanic3$survived, group=titanic3$sex, datadensity=T) # or group=pclass
#####
# Load file
load("titanic3.sav")
plsmo(titanic3$age, titanic3$survived, group=titanic3$sex, datadensity=T) # or group=pclass
unique(titanic3$age)
plsmo
#####
# Load file
load("titanic3.RData")
