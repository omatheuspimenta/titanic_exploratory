# Libraries
library("Hmisc") #for describe
t <- count(titanic3[titanic3$survived==1,], 'lastname')
library("plyr") #for count
library("dplyr") #for summary
library("boot") #for bootstrap
#####
# Libraries
library("Hmisc") #for describe
t <- count(titanic3[titanic3$survived==1,], 'lastname')
View(t)
t <- count(titanic3$survived==1, 'lastname')
# `1st`
# Cherbourg  Queenstown Southampton
#       142           3         178
# `2nd`
# Cherbourg  Queenstown Southampton
#        28           7         242
#`3rd`
# Cherbourg  Queenstown Southampton
#       101         113         495
tapply(titanic3$embarked, titanic3$survived, table)
View(t)
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
#####
# Libraries
library("Hmisc") #for describe
library("stringr") #for string manipulation
library("ggplot2") #for graphics
library("plyr") #for count
library("dplyr") #for summary
library("boot") #for bootstrap
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
library("plyr") #for count
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
detach("package:ggplot2", unload = TRUE)
detach("package:Hmisc", unload = TRUE)
library("plyr") #for count
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
detach("package:plyr", unload = TRUE)
library("plyr") #for count
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'title')
View(t)
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3, 'lastname')
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3[titanic3$survived==1], 'lastname')
# Plot barplot of frequency - title
# temp variable for barplot - title
t<-count(titanic3[titanic3$survived==1,], 'lastname')
View(t)
t<-t[order(t$freq, decreasing = TRUE),]
View(t)
# 0  1
# 30 16
# families with high number of survived
t<-count(titanic3[titanic3$survived==1,], 'lastname')
t<-t[order(t$freq, decreasing = TRUE),]
ylim <- c(0, 1.1*max(t$freq))
xx <- barplot(t$freq[1:20],
col = rainbow(20),
main = "Barplot - Title",
xlab = "Title",
ylab = "Frequency",
ylim = ylim)
text(x = xx, y = t$freq[1:20], label = t$freq[1:20], pos = 3, cex = 0.8, col = "black")
axis(1, at=xx, labels=t$title[1:20], tick=FALSE, las=2, line=-0.5, cex.axis=0.8)
View(t)
t<-count(titanic3[titanic3$survived==1,], 'lastname')
t<-t[order(t$freq, decreasing = TRUE),]
ylim <- c(0, 1.1*max(t$freq))
xx <- barplot(t$freq[1:10],
col = rainbow(20),
main = "Barplot - Families/Survived",
xlab = "Families",
ylab = "Frequency",
ylim = ylim)
text(x = xx, y = t$freq[1:10], label = t$freq[1:10], pos = 3, cex = 0.8, col = "black")
axis(1, at=xx, labels=t$lastname[1:10], tick=FALSE, las=2, line=-0.5, cex.axis=0.8)
# remove temp variables
remove(t,xx,ylim)
library("dplyr") #for summary
# select subset from dataframe
df <- select(titanic3,pclass)
View(df)
# select subset from dataframe
df <- select(titanic3, pclass, survived, age, fare, nfamily, mom)
View(df)
# select subset from dataframe
df_cor <- select(titanic3, pclass, survived, age, fare, nfamily, mom)
remove(df)
cormat <- round(cor(df_cor),2)
View(df_cor)
df_cor$class <- ifelse(df_cor$pclass=="1st",1,ifelse(df_cor$pclass=="2nd",2,ifelse(df_cor$pclass=="3rd",3,0)))
View(df_cor)
df_cor$pclass <- NULL
cormat <- round(cor(df_cor),2)
# correlation matrix
cormat <- round(cor(df_cor),2)
library("reshape2")
cormat_melted <- melt(cormat)
head(cormat_melted)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = cormat_melted, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
cormat_melted <- melt(upper_tri)
ggplot(data = cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# graph
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Create a ggheatmap
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# graph
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
cormat <- round(cor(df_cor),2)
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
cormat_melted <- melt(upper_tri)
# Create a ggheatmap
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# graph
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
cormat_melted <- melt(upper_tri)
# Create a ggheatmap
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
cormat_melted <- melt(cormat)
# Create a ggheatmap
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation")  +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation")  +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
ggheatmap +
geom_text(aes("OI", Var1, label = value), color = "black", size = 4)
# Create a ggheatmap
ggheatmap <- ggplot(cormat_melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation")  +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
# graph
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
#remove temp variables
remove(ggheatmap, cormat, cormat_melted)
remove(upper_tri, get_upper_tri())
remove(upper_tri, get_upper_tri
d]
remove(upper_tri, get_upper_tri)
# correlation tests
cor.test(df_cor$class,df_cor$fare, method = "Pearson")
# correlation tests
cor.test(df_cor$class,df_cor$fare, method = "pearson")
cor.test(df_cor$class,df_cor$nfamily, method = "pearson")
plot(df_cor$class,df_cor$fare)
plot(df_cor$age,df_cor$fare)
theme_ipsum()
ggplot(df_cor, aes(x=age, y=fare, color=class)) +
geom_point(size=6) +
theme_ipsum()
ggplot(df_cor, aes(x=age, y=fare, color=class)) +
geom_point(size=6)
ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
# correlation tests (if necessary)
cor.test(df_cor$class,df_cor$fare, method = "pearson")
# scatterplots
ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
+     geom_point(size=3)
ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
+     geom_point(size=3)
ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p<-ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)")
p<-ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
theme(legend.title = "Class"
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
theme(legend.title = "Class")
p<-ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
theme(legend.title = "Class")
p<-ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare")
p<-ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(
colour = "name1",
shape = "name2"
)
p<-ggplot(titanic3, aes(x=age, y=fare, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
p<-ggplot(titanic3, aes(x=mom, y=age, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
p<-ggplot(titanic3, aes(x=age, y=mom, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
p<-ggplot(titanic3, aes(x=age, y=mom==1, color=pclass)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
p<-ggplot(titanic3, aes(x=age, y=mom==1, color=survived)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
View(titanic3)
p<-ggplot(titanic3, aes(x=age, y=mom, color=survived)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
p<-ggplot(titanic3, aes(x=age, y=survived, color=mom)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
p<-ggplot(titanic3, aes(x=age, y=fare, color=survived)) +
geom_point(size=3)
p + labs(title = "Scatterplot - Age/Fare",
x="Age (years)",
y="Fare") +
labs(colour = "Class")
boxplot(titanic3$pclass~titanic3$survived)
boxplot(titanic3$pclass~titanic3$survived)
boxplot(titanic3$pclass~titanic3$fare)
boxplot(titanic3$fare~titanic3$pclass)
boxplot(titanic3$survived~titanic3$pclass)
wilcox.test(age~pclass,data = titanic3)
# Pearson's product-moment correlation
# data:  df_cor$class and df_cor$fare
# t = -24.353, df = 1307, p-value < 2.2e-16
# alternative hypothesis: true correlation is not equal to 0
# 95 percent confidence interval:
#  -0.5948682 -0.5202611
# sample estimates:
#        cor
# -0.5586939
# remove temp variables
remove(df_cor)
# remove temp variables
remove(p)
#####
# HT - Wilcoxon Test
# split dataframe
class1 <- titanic3[titanic3$pclass == "1st"]
#####
# HT - Wilcoxon Test
# split dataframe
class1 <- titanic3[titanic3$pclass == "1st",]
class2 <- titanic3[titanic3$pclass == "2nd",]
class3 <- titanic3[titanic3$pclass == "3rd",]
# wilcox.test -> age
wt_age <- wilcox.test(class1$age, class2$age)
View(wt_age)
wt_age
#H0: \mu1 = \mu2
#H1: \mu1 \neq \mu2
# Wilcoxon rank sum test with continuity correction
# data:  class1$age and class2$age
# W = 62581, p-value < 2.2e-16
# alternative hypothesis: true location shift is not equal to 0
# Thus, \mu1 \neq \mu2, p-value < 0.05 (alpha)
wt_age23 <- wilcox.test(class2$age, class3$age)
wt_age23
# Wilcoxon rank sum test with continuity correction
# data:  class2$age and class3$age
# W = 122412, p-value = 1.291e-09
# alternative hypothesis: true location shift is not equal to 0
# Thus, \mu1 \neq \mu2, p-value < 0.05 (alpha)
wt_age31 <- wilcox.test(class3$age, class1$age)
wt_age31
# Wilcoxon rank sum test with continuity correction
# data:  class3$age and class1$age
# W = 45690, p-value < 2.2e-16
# alternative hypothesis: true location shift is not equal to 0
# Thus, \mu1 \neq \mu2, p-value < 0.05 (alpha)
# All positions measures for the age in the populations are different
# based  in the wilcox.test
remove(wt_*)
# Wilcoxon rank sum test with continuity correction
# data:  class3$age and class1$age
# W = 45690, p-value < 2.2e-16
# alternative hypothesis: true location shift is not equal to 0
# Thus, \mu1 \neq \mu2, p-value < 0.05 (alpha)
# All positions measures for the age in the populations are different
# based  in the wilcox.test
remove(wt_age)
# Wilcoxon rank sum test with continuity correction
# data:  class3$age and class1$age
# W = 45690, p-value < 2.2e-16
# alternative hypothesis: true location shift is not equal to 0
# Thus, \mu1 \neq \mu2, p-value < 0.05 (alpha)
# All positions measures for the age in the populations are different
# based  in the wilcox.test
remove(wt_age12, wt_age23, wt_age31)
# wilcox.test -> fare
wr_fare12 <- wilcox.test(class1$fare, class2$fare)
# wilcox.test -> fare
wt_fare12 <- wilcox.test(class1$fare, class2$fare)
wt_fare12
wt_fare23 <- wilcox.test(class2$fare, class3$fare)
wt_fare23
wt_fare31 <- wilcox.test(class3$fare, class1$fare)
wt_fare31
# Wilcoxon rank sum test with continuity correction
# data:  class3$fare and class1$fare
# W = 12184, p-value < 2.2e-16
# alternative hypothesis: true location shift is not equal to 0
# Thus, \mu1 \neq \mu2, p-value < 0.05 (alpha)
# We have evidence that all positions measures for the fare
# in the populations are different based  in the wilcox.test
remove(wt_fare12, wt_fare23, wt_fare31)
remove(wr_fare12)
remove(class1, class2, class3)
